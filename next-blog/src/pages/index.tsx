import ArticleList from '@/components/articleList';
import Pagination from '@/components/pagination';
import Tabs from '@/components/tabs';
import { fetchArticles, fetchCategories } from '@/http';
import { IArticle, ICategory, ICollectionResponse, IPagination, IQueryType } from '@/types';
import { debounce } from '@/utils';
import { AxiosResponse } from 'axios';
import { GetServerSideProps } from 'next';
import Head from 'next/head';
import { useRouter } from 'next/router';
import qs from 'qs';

interface IPropType {
  categories: { items: ICategory[] };
  articles: {
    items: IArticle[],
    pagination: IPagination
  };
}

export default function Home({ categories, articles }: IPropType) {
  console.log("categories", categories);
  const route = useRouter()
  const handleSearch = (query: string) => {
    route.push(`/?search=${query}`);
  }
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Tabs categories={categories.items} handleOnSearch={debounce(handleSearch,500)} />
      <ArticleList articles={articles.items} />
      <Pagination
        page={articles.pagination.page}
        pageCount={articles.pagination.pageCount}
      />

    </>
  );
}

export const getServerSideProps: GetServerSideProps = async ({ query }) => {
  const option: Partial<IQueryType> = {
    populate: ['author.avatar'],
    sort: ['id:desc'],
    pagination: {
      page: query.page ? +query.page : 1,
      pageSize: 1,
    }
  }
  if (query.search) {
    option.filters = {
      title: {
        $containsi: query.search
      }
    }
  }
  const queryString = qs.stringify(option);
  console.log("queryStrig", queryString);
  const { data: articles }: AxiosResponse<ICollectionResponse<IArticle[]>> = await fetchArticles(queryString);
  console.log("articles", JSON.stringify(articles));
  const { data: categories }: AxiosResponse<ICollectionResponse<ICategory[]>> = await fetchCategories();
  console.log("catagories", categories);

  return {
    props: {
      categories: { items: categories.data },
      articles: {
        items: articles.data,
        pagination: articles.meta.pagination
      }
    }
  }
}