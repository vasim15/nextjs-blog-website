import Tabs from "@/components/tabs";
import Head from "next/head"
import { GetServerSideProps } from 'next';
import { AxiosResponse } from "axios";
import { IArticle, ICategory, ICollectionResponse, IPagination, IQueryType } from "@/types";
import { fetchArticles, fetchCategories } from "@/http";
import qs from "qs";
import ArticleList from "@/components/articleList";
import { capitalFirstLetter, debounce, removeDash } from "@/utils";
import Pagination from "@/components/pagination";
import { useRouter } from "next/router";

interface IPropType {
    categories: {
        items: ICategory[],
        pagination: IPagination
    },
    articles: {
        items: IArticle[],
        pagination: IPagination
    },
    slug: string
}

const Category = ({ categories, articles, slug }: IPropType) => {
    const route = useRouter();
    const formattedCategory = (d:string) => {
        return capitalFirstLetter(removeDash(d));
    };
    const handleSearch = (query: string) => {
        route.push(`/category/${slug}?search=${query}`);
    }


    console.log("aarticale", articles);
    return (
        <>
            <Head>
                <title>Create Next App | {formattedCategory(slug)}</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <Tabs categories={categories.items} handleOnSearch={debounce(handleSearch, 500)} />
            <ArticleList articles={articles.items} />
            <Pagination page={articles.pagination.page} pageCount={articles.pagination.pageCount} redirectUrl={`/category/${slug}`} />
        </>
    )
}

export const getServerSideProps: GetServerSideProps = async ({ query }) => {
    console.log("query", query);
    const option: Partial<IQueryType>= {
        populate: ['author.avatar'],
        sort: ['id:desc'],
        pagination: {
            page: query.page ? +query.page : 1,
            pageSize: 1,
        },
        filters: {
            category: {
                slug: query.category
            }
        }
    }
    if (query.search) {
        option.filters = {
          title: {
            $containsi: query.search
          }
        }
      }
    const queryString = qs.stringify(option);
    const { data: articles }: AxiosResponse<ICollectionResponse<IArticle[]>> = await fetchArticles(queryString);

    const { data: categories }: AxiosResponse<ICollectionResponse<ICategory[]>> = await fetchCategories();
    return {
        props: {
            categories: {
                items: categories.data,
                pagination: categories.meta.pagination
            },
            articles: {
                items: articles.data,
                pagination: articles.meta.pagination
            },
            slug: query.category
        }
    }

}
export default Category
